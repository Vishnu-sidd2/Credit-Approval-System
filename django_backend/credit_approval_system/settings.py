"""
Django settings for credit_approval_system project.

Generated by 'Django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url # ADDED: For parsing database URLs

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR should point to the folder containing manage.py (i.e., 'django_backend')
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from the .env file located directly within BASE_DIR
load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variables. IMPORTANT: Replace with a generated key.
SECRET_KEY = os.environ.get('SECRET_KEY') # Assuming SECRET_KEY is always set now

# --- TEMPORARY DIAGNOSTIC SETTING ---
# Set DEBUG to False temporarily to ensure CELERY_TASK_ALWAYS_EAGER takes effect.
# REMEMBER TO REVERT THIS TO True (or its original os.environ.get line) AFTER DEBUGGING!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'
# DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true' # Original line, uncomment to revert
# --- END TEMPORARY DIAGNOSTIC SETTING ---

ALLOWED_HOSTS = ['*'] # WARNING: Be more restrictive in production environments (e.g., your domain)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders', # Assuming you've installed 'django-cors-headers'
    'credit_system', # Your custom application app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Add CORS middleware if needed
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# --- CORRECTED PROJECT PATHS BASED ON YOUR DIRECTORY STRUCTURE ---
# Your actual Django project folder (containing settings.py, urls.py, wsgi.py)
# is named 'credit_approval_system' and it sits inside 'django_backend'.
ROOT_URLCONF = 'credit_approval_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'credit_approval_system.wsgi.application'
# --- END CORRECTED PROJECT PATHS ---


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# --- PostgreSQL DATABASE CONFIGURATION ---
# The DATABASE_URL environment variable will be set by Docker Compose
# For local development outside Docker, it will default to the specified URL
DATABASE_URL = os.environ.get('DATABASE_URL', 'postgres://user:password@localhost:5432/credit_approval_db')
DATABASES = {
    'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600) # conn_max_age keeps connections alive
}
# --- END PostgreSQL DATABASE CONFIGURATION ---


# Password validation
# https://docs.djangoproject.com/en/4.2/topics/auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' # Changed to a specific timezone in India

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # Needed for `python manage.py collectstatic`

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CELERY SETTINGS ---
# These values will be overridden by environment variables in docker-compose.yml when running in Docker
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny', 
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True 
CORS_ALLOW_CREDENTIALS = True

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple', 
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', 
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'credit_system': { 
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': { 
            'handlers': ['console'],
            'level': os.getenv('CELERY_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    }
}